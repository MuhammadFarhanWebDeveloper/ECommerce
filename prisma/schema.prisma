generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          String
  total           Float
  status          OrderStatus   @default(PENDING)
  shippingAddress String
  city            String
  postalCode      String
  paidAt          DateTime?
  paymentMethod   String        @default("CashOnDelivery")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  deliveryOtp     String?
  paymentStatus   PaymentStatus
  User            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           OrderItem[]
}

model OrderItem {
  id             Int            @id @default(autoincrement())
  orderId        Int
  productId      Int
  variantId      Int
  quantity       Int
  Order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product        @relation(fields: [productId], references: [id])
  ProductVariant ProductVariant @relation(fields: [variantId], references: [id])
}

model Product {
  id            Int              @id @default(autoincrement())
  name          String
  category      Category
  description   String
  gender        Gender
  price         Float
  discountPrice Float            @default(0)
  isFeatured    Boolean          @default(false)
  items         OrderItem[]
  images        ProductImage[] // one-to-manyAdd commentMore actions
  variants      ProductVariant[] // one-to-many
  user          User             @relation(fields: [userid], references: [id])
  userid        String
}

model ProductColor {
  id       Int              @id @default(autoincrement())
  name     String
  hex      String           @unique
  variants ProductVariant[] // reverse relation
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model ProductVariant {
  id        Int          @id @default(autoincrement())
  color     ProductColor @relation(fields: [colorId], references: [id])
  colorId   Int
  size      Size
  quantity  Int
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  OrderItem OrderItem[]
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  role          Role            @default(USER)
  Authenticator Authenticator[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  products  Product[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Category {
  topwear
  bottomwear
}

enum Gender {
  men
  women
  unisex
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  UNPAID
}

enum paymentMethod {
  CashOnDelivery
  Stripe
}

enum Role {
  ADMIN
  USER
}

enum Size {
  XS
  S
  M
  L
  XL
  XLL
}

// ENUMS
